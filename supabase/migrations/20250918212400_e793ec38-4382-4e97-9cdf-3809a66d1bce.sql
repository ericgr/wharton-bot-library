-- Create clients table
CREATE TABLE public.clients (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name text NOT NULL,
  user_id uuid NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;

-- Create policies for client access
CREATE POLICY "Users can view their own clients" 
ON public.clients 
FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own clients" 
ON public.clients 
FOR INSERT 
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own clients" 
ON public.clients 
FOR UPDATE 
USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own clients" 
ON public.clients 
FOR DELETE 
USING (auth.uid() = user_id);

-- Add client_id to chatbot_configs table
ALTER TABLE public.chatbot_configs
ADD COLUMN client_id uuid REFERENCES public.clients(id) ON DELETE CASCADE;

-- Create chat_transcripts table
CREATE TABLE public.chat_transcripts (
    id bigint generated by default as identity primary key,
    session_id text not null,
    chatbot_id uuid references public.chatbot_configs(id),
    client_id uuid references public.clients(id),
    cookie_visitor_id text NULL,
    messages jsonb,
    created_at timestamp with time zone default now()
);

-- Enable RLS on chat_transcripts
ALTER TABLE public.chat_transcripts ENABLE ROW LEVEL SECURITY;

-- Create policies for chat_transcripts
CREATE POLICY "Users can view transcripts for their clients" 
ON public.chat_transcripts 
FOR SELECT 
USING (
  EXISTS (
    SELECT 1 FROM public.clients 
    WHERE clients.id = chat_transcripts.client_id 
    AND clients.user_id = auth.uid()
  )
);

CREATE POLICY "Allow insert for chat transcripts" 
ON public.chat_transcripts 
FOR INSERT 
WITH CHECK (true);

-- Create function to update updated_at for clients
CREATE TRIGGER update_clients_updated_at
BEFORE UPDATE ON public.clients
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

-- Create default "KMT" client for each existing user and associate their chatbots
DO $$
DECLARE
    user_record RECORD;
    kmt_client_id uuid;
BEGIN
    FOR user_record IN 
        SELECT DISTINCT user_id FROM public.chatbot_configs 
        WHERE client_id IS NULL
    LOOP
        -- Create KMT client for this user
        INSERT INTO public.clients (name, user_id)
        VALUES ('KMT', user_record.user_id)
        RETURNING id INTO kmt_client_id;
        
        -- Associate existing chatbots with KMT client
        UPDATE public.chatbot_configs 
        SET client_id = kmt_client_id 
        WHERE user_id = user_record.user_id AND client_id IS NULL;
    END LOOP;
END $$;

-- Function to check for duplicate client names
CREATE OR REPLACE FUNCTION public.check_duplicate_client_name(client_name text, user_id_param uuid, exclude_client_id uuid DEFAULT NULL)
RETURNS boolean AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM public.clients 
        WHERE LOWER(TRIM(name)) = LOWER(TRIM(client_name)) 
        AND user_id = user_id_param
        AND (exclude_client_id IS NULL OR id != exclude_client_id)
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE SET search_path = public;